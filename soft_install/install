
if [ -f "${XDG_CONFIG_HOME:-~/.config}/user-dirs.dirs" ] ; then
    source "${XDG_CONFIG_HOME:-~/.config}/user-dirs.dirs"
fi

export DIST_CODENAME=`lsb_release -c | awk '{print $2}'`

export DESKTOP_DIR="${XDG_DESKTOP_DIR:-$HOME/Desktop}"
export DOWNLOADS_DIR="${XDG_DOWNLOADS_DIR:-$HOME/Downloads}"
export PKG_ARCHIVE="${DOWNLOADS_DIR}/pkgarch"
mkdir  -p "${PKG_ARCHIVE}"

#------------------------------------------------------------------------------------------------------

function preAuthRoot () {

    if ! [ -z "${ROOT_PASS}" ] ; then
        if eval "echo ${ROOT_PASS} | sudo -S printf ''" ; then return 0
        else return 1
        fi
    fi
}
export -f preAuthRoot

#------------------------------------------------------------------------------------------------------

function show_message() {

    echo ""
    for MSG in "$@" ; do echo "    ${MSG}" ; done
    echo ""
}
export -f show_message

function exportdefvar() {
    if ( ! [ "${!1}" ] && [ "$2" ] ) ; then eval "export $1=\"${2}\"" ; fi
}
export -f exportdefvar

SECONDS=0
function showElapsedTime() {

    duration=${SECONDS}
    show_message "$((${duration} / 60)) min. $((${duration} % 60)) sec. elapsed"
}
export -f showElapsedTime

function goto_exit() {
    showElapsedTime
    if ( [[ $# != 0 ]] && [[ $1 != 0 ]] ) ; then
        show_message "ERROR CODE: $@"
        exit $@
    fi
}
export -f goto_exit

#------------------------------------------------------------------------------------------------------

SCRIPT_SRC_DIR="$(dirname "$(realpath -s "$0")")"

source /etc/os-release

if ! [ -z "$(cat /etc/os-release | grep "ID=neon")" ] ; then export IS_KDE_NEON=1 ; fi

if [[ $IS_KDE_NEON ]] ; then
    export IFS='.'
    read -r -a PLASMA_VERSION <<< $(plasmashell --version | grep plasma | cut -d ' ' -f2)
fi

if [[ `echo $XDG_CURRENT_DESKTOP` == "KDE" ]] ; then export IS_KDE=1 ; fi

#------------------------------------------------------------------------------------------------------

function update_system() {

    preAuthRoot
    sudo apt -f install -y

    if [[ $IS_KDE_NEON ]] ; then
        # KDE Neon
        if ! ( pkcon refresh ) ; then
            show_message "FAILED TO UPDATE SYSTEM (pkcon)"
            goto_exit 1
        fi
        pkcon update -y
    else
        # Ubuntu
        preAuthRoot
        if ! ( sudo apt update && sudo apt upgrade -y ) ; then
            show_message "FAILED TO UPDATE SYSTEM (apt)"
            goto_exit 1
        fi
    fi

    preAuthRoot
    sudo apt -f install -y

    return 0
}

function get_local() {

    if ! [ -f "${PKG_ARCHIVE}/$1" ] ; then
        mkdir -p "${PKG_ARCHIVE}"

        if [ -d "${PKG_ARCHIVE}" ] ; then
            if ( wget -nc -O "${PKG_ARCHIVE}/$1" "$2" ) ; then
                return 0
            fi
        fi

        show_message "FAILED TO GET PACKAGE $1"
        goto_exit 1
    fi

    return 0
}

function install_local_solo_lpkg() {

    PKG_NAME="$1"

    if ! [ -f "${PKG_NAME}" ] ; then
        if   [ -f "${PKG_NAME}.deb" ] ; then PKG_NAME="${PKG_NAME}.deb";
        elif [ -f "${PKG_NAME}.flatpakref" ] ; then PKG_NAME="${PKG_NAME}.flatpakref";
        elif [ -f "${PKG_ARCHIVE}/${PKG_NAME}" ] ; then PKG_NAME="${PKG_ARCHIVE}/${PKG_NAME}";
        elif [ -f "${PKG_ARCHIVE}/${PKG_NAME}.deb" ] ; then PKG_NAME="${PKG_ARCHIVE}/${PKG_NAME}.deb";
        elif [ -f "${PKG_ARCHIVE}/${PKG_NAME}.flatpakref" ] ; then PKG_NAME="${PKG_ARCHIVE}/${PKG_NAME}.flatpakref";
        elif [ -f "${PKG_ARCHIVE}/${PKG_NAME}.AppImage" ] ; then PKG_NAME="${PKG_ARCHIVE}/${PKG_NAME}.AppImage";
        else unset PKG_NAME
        fi
    fi

    if [[ -f "${PKG_NAME}" ]] ; then
        preAuthRoot
        AILEF="`whereis AppImageLauncher | awk '{print $2}'`"
        if ( [[ "${PKG_NAME}" =~ ".AppImage" ]] && [ -f "${AILEF}" ] ) ; then
            eval AppImageLauncher "${PKG_NAME}" &
            return 0
        elif ( sudo pkcon install-local "${PKG_NAME}" -y ) ; then
            if [[ "${PKG_NAME}" =~ ".flatpakref" ]] ; then
                preAuthRoot
                sudo flatpak override "${PKG_NAME}" --filesystem=/media --filesystem=/mnt --filesystem=/run/media --filesystem=/run/mnt
            fi
            return 0;
        fi

        show_message "INSTALLATION WAS FAILED (AppImageLauncher, pkcon-local)"
        goto_exit 1
    fi

    return 1;
}

function install_lpkg() {

    REMOTE_PKGS=()

    for LOCAL_PKG_NAME in "$@" ; do
        if ! ( install_local_solo_lpkg "$LOCAL_PKG_NAME" ) ; then
            REMOTE_PKGS+=("$LOCAL_PKG_NAME")
        fi
    done

    if ! [[ -z "${REMOTE_PKGS[@]}" ]] ; then
        preAuthRoot
        AAAarg="-y"
        if [[ "${APT_AUTO_ACCEPT}" == "n" ]] ; then unset AAAarg ; fi
        if ! ( sudo apt install --install-recommends "${REMOTE_PKGS[@]}" "${AAAarg}" ) ; then
            preAuthRoot
            if ! ( sudo apt -f install "${AAAarg}" ) ; then
                show_message "INSTALLATION WAS FAILED (apt)"
                goto_exit 1
            fi
        fi
    fi

    return 0
}

function install_snap() {
    for SNAP_PKG_NAME in "$@" ; do
        preAuthRoot
        if ! ( eval "sudo snap install $SNAP_PKG_NAME" ) ; then
            show_message "INSTALLATION OF $SNAP_PKG_NAME WAS FAILED (snap)"
            goto_exit 1
        fi
    done
}

function install_flatpak() {
    for FPK_PKG_NAME in "$@" ; do
        if ! ( eval "flatpak install flathub $FPK_PKG_NAME" ) ; then
            show_message "INSTALLATION OF $FPK_PKG_NAME WAS FAILED (flatpak)"
            goto_exit 1
        fi
    done
}
